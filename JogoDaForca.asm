; multi-segment executable file template.

data segment


LETRA_A: 
DB 11111110B
DB 10000010B
DB 10000010B
DB 10000010B
DB 11111110B
DB 10000010B
DB 10000010B
DB 10000010B
DB "$"
      
LETRA_B: 
DB 11111110B
DB 10000010B
DB 10000010B
DB 10000010B
DB 11111100B
DB 10000010B
DB 10000010B
DB 11111110B
DB "$"

LETRA_C: 
DB 11111110B
DB 10000000B
DB 10000000B
DB 10000000B
DB 10000000B
DB 10000000B
DB 10000000B
DB 11111110B
DB "$" 

LETRA_D: 
DB 11111110B
DB 10000001B
DB 10000001B
DB 10000001B
DB 10000001B
DB 10000001B
DB 10000001B
DB 11111110B
DB "$" 

LETRA_E: 
DB 11111110B
DB 10000000B
DB 10000000B
DB 10000000B
DB 11111100B
DB 10000000B
DB 10000000B
DB 11111110B
DB "$"
         
         
LETRA_F: 
DB 11111110B
DB 10000000B
DB 10000000B
DB 10000000B
DB 11111100B
DB 10000000B
DB 10000000B
DB 10000000B
DB "$"

LETRA_G: 
DB 11111110B
DB 10000010B
DB 10000000B
DB 10000000B
DB 10001110B
DB 10000010B
DB 10000010B
DB 11111110B
DB "$"

LETRA_H: 
DB 10000010B
DB 10000010B
DB 10000010B
DB 10000010B
DB 11111110B
DB 10000010B
DB 10000010B
DB 10000010B
DB "$"

LETRA_I: 
DB 11111110B
DB 00010000B
DB 00010000B
DB 00010000B
DB 00010000B
DB 00010000B
DB 00010000B
DB 11111110B
DB "$" 

LETRA_J: 
DB 11111110B
DB 00001000B
DB 00001000B
DB 00001000B
DB 00001000B
DB 10001000B
DB 10001000B
DB 11111000B
DB "$"

LETRA_K: 
DB 10000010B
DB 10000100B
DB 10001000B
DB 10010000B
DB 11100000B
DB 10010000B
DB 10001000B
DB 10000110B
DB "$" 
 
LETRA_L: 
DB 10000000B
DB 10000000B
DB 10000000B
DB 10000000B
DB 10000000B
DB 10000000B
DB 10000000B
DB 11111110B
DB "$"

LETRA_M: 
DB 11000110B
DB 10101010B
DB 10010010B
DB 10010010B
DB 10000010B
DB 10000010B
DB 10000010B
DB 10000010B
DB "$"  

LETRA_N: 
DB 10000010B
DB 11000010B
DB 10100010B
DB 10010010B
DB 10001010B
DB 10001010B
DB 10000110B
DB 10000010B
DB "$"

LETRA_O: 
DB 11111110B
DB 10000010B
DB 10000010B
DB 10000010B
DB 10000010B
DB 10000010B
DB 10000010B
DB 11111110B
DB "$"

LETRA_P: 
DB 11111110B
DB 10000010B
DB 10000010B
DB 11111110B
DB 10000000B
DB 10000000B
DB 10000000B
DB 10000000B
DB "$"

LETRA_Q: 
DB 00111100B
DB 01000010B
DB 10000010B
DB 10000010B
DB 10000010B
DB 10001010B
DB 01000110B
DB 00111010B
DB "$"

LETRA_R: 
DB 11111110B
DB 10000010B
DB 10000010B
DB 11111110B
DB 11000000B
DB 10100000B
DB 10010000B
DB 10001000B
DB "$"

LETRA_S: 
DB 11111110B
DB 10000000B
DB 10000000B
DB 11111110B
DB 00000010B
DB 00000010B
DB 00000010B
DB 11111110B
DB "$"

LETRA_T: 
DB 11111110B
DB 00010000B
DB 00010000B
DB 00010000B
DB 00010000B
DB 00010000B
DB 00010000B
DB 00010000B
DB "$"

LETRA_U: 
DB 10000010B
DB 10000010B
DB 10000010B
DB 10000010B
DB 10000010B
DB 10000010B
DB 01000100B
DB 00111000B
DB "$"

LETRA_V: 
DB 10000010B
DB 10000010B
DB 10000010B
DB 01000100B
DB 00100100B
DB 00100100B
DB 00011000B
DB 00011000B
DB "$"

LETRA_W: 
DB 10000010B
DB 10000010B
DB 10000010B
DB 01000100B
DB 01000100B
DB 01010100B
DB 01010100B
DB 00101000B
DB "$"

LETRA_X: 
DB 10000010B
DB 01000100B
DB 00101000B
DB 00010000B
DB 00101000B
DB 01101100B
DB 01000100B
DB 10000010B
DB "$"

LETRA_Y: 
DB 10000010B
DB 01000100B
DB 00101000B
DB 00010000B
DB 00010000B
DB 00010000B
DB 00010000B
DB 00010000B
DB "$"

LETRA_Z: 
DB 11111110B
DB 00000010B
DB 00000100B
DB 00001000B
DB 00010000B
DB 00100000B
DB 01000000B
DB 11111110B
DB "$"

TRACO:
DB 00000000B
DB 00000000B
DB 00000000B
DB 11111110B
DB 11111110B
DB 00000000B
DB 00000000B
DB 00000000B
DB "$"             

erros db 0           ;Contador de erros
palavra db "miguel$" ;Paravra para ser escrita
EXIBICAO DW 6        ;Sera axibido na tela 
linha db 1           ;Linha onde sera escrita a palavra
coluna db 1          ;Coluna onde sera escrita a palavra
         
ends

stack segment
dw 128 dup(0)
ends

code segment
start:
    ; set segment registers:
    mov ax, data
    mov ds, ax
    mov es, ax
    
    ; add your code here
    
    MOV AH,0 ;SETA MODO VIDEO
    MOV AL,0DH ;320x200
    INT 10H ;CHAMA BIOS - PLACA VIDEO
    
    MOV SI,0A000H
    MOV ES,SI ; AGORA ES APONTA PARA O SEGMENTO DE VIDEO MODO GRAFICO 
    
    
    ;TODO 1: STATUS OK
    ;Capturar o input e verificar em qual registrador ele fica  
    
CAPTURA:       

    mov ah, 1   ;prepara para entrar caracter pelo teclado
                ;o processador espera ate que o usuario
                ;digite o caracter desejado    
                
    int 21h     ;apos a digitacao, caracter ASCII em AL
                ;se um caracter nao-ASCII for digitado, AL = 0h
    
    
    ;TODO 2: STATUS NAO OK - FALTA TRATAMENTO DE ERRO
    ;Verificar se o input existe na palavra;
      
    
    lea si, palavra ;coloca uma copia do offset do endereco
                    ;da posicao de memoria fonte no registrador destino. 
    mov cl, 0

VERIFICA:   
    
    cmp ds:[si], al ;compara se o codigo ASCII eh igual ao do offset do data segment 
                    ;Obs: nao difere maiusculas de minusculas
    
    je ESCREVER_ACERTO     ;tratamento caso seja certo
    
    cmp ds:[si], "$";se a chegar ao sifrao entao o input nao existe na palavra
    je ESCREVER_ERRO     ;tratamento do erro
            
    inc si          ;passa para o proximo offset da palavra    
    inc cl          ;contador para escrever palavra
    jmp VERIFICA
    
                    
ESCREVER_ERRO:           ;tratamento para testes
    MOV AH,1  
    MOV AL,5 
    LEA SI,LETRA_Z 
    JMP ESCREVE_DISPLAY_GRAFICO
    jmp CAPTURA    
    
    ;TODO 3: STATUS NAO OK  - FALTA O TRATAMENTO DE ERRO
    ;Se o input existe na palavra escrevelo na tela, se nao desenhar a forca   
    
ESCREVER_ACERTO:
    CALL ESCREVE_LETRA
    JMP CAPTURA
    
ESCREVE_LETRA: 
    
    CMP AL, "a"
    LEA SI, LETRA_A
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA 
        
    CMP AL, "b"
    LEA SI, LETRA_B
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "c"
    LEA SI, LETRA_C
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "d"
    LEA SI, LETRA_D
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "e"
    LEA SI, LETRA_E
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "f"
    LEA SI, LETRA_F
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "g"
    LEA SI, LETRA_G
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "h"
    LEA SI, LETRA_H
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "i"
    LEA SI, LETRA_I
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "j"
    LEA SI, LETRA_J
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "k"
    LEA SI, LETRA_K
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "l"
    LEA SI, LETRA_L
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "m"
    LEA SI, LETRA_M
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "n"
    LEA SI, LETRA_N
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "o"
    LEA SI, LETRA_O
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "p"
    LEA SI, LETRA_P
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "q"
    LEA SI, LETRA_Q
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "r"
    LEA SI, LETRA_R
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "s"
    LEA SI, LETRA_S
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "t"
    LEA SI, LETRA_T
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "u"
    LEA SI, LETRA_U
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "v"
    LEA SI, LETRA_V
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "w"
    LEA SI, LETRA_W
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "x"
    LEA SI, LETRA_X
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "y"
    LEA SI, LETRA_Y
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
        
    CMP AL, "z"
    LEA SI, LETRA_Z
    JE ESCREVE_DISPLAY_LETRA
    JE RETORNA
                            
ESCREVE_DISPLAY_LETRA:
    CALL ESCREVE_DISPLAY_GRAFICO                           
                          
RETORNA:
    RET    
    
    
    
    ;TODO 4; STATUS NAO OK
    ;Vericar se o jogo terminou
    
  
    
    mov ax, 4c00h ; exit to operating system.
    int 21h

ESCREVE_DISPLAY_GRAFICO: 
    MOV AH,COLUNA
    MOV AL,LINHA
    ADD AH, CL

    PUSH AX
    MOV BL,8
    MUL BL 
    MOV BL,40
    MUL BL
    ; AX = AL*BL = 1*40
    ; DI APONTARA PARA O OFFSET
    MOV DI,AX
    POP AX
    MOV AL,0
    XCHG AH,AL 
    ADD DI,AX
ESCREVE:
    MOV AL, [SI]
    CMP AL, "$"
    JE SAI
    MOV ES:[DI],AL
    ADD DI,40
    INC SI
    JMP ESCREVE
SAI:
    RET
 


ends

end start ; set entry point and stop the assembler.